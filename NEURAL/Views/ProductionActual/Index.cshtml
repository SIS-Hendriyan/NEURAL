@model List<NEURAL.Models.ProductionActual.ProductionActualModel>
@{
    ViewData["Title"] = "Production Actual";
}

@using Newtonsoft.Json
@using Newtonsoft.Json.Converters
@{
    var jsonSettings = new JsonSerializerSettings();
    jsonSettings.Converters.Add(new StringEnumConverter()); // enum => string
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link href="../../@Html.Raw(ViewBag.AppName)/css/neural-modules.css" rel="stylesheet" />
</head>
<body>
    <div class="main-container">
        <!-- Header -->
        <div class="header-card">
            <h1 class="header-title">Production Actual</h1>
        </div>

        <!-- Success/Error Messages -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success">
                <span>✓</span>
                @TempData["SuccessMessage"]
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-error">
                <span>⚠</span>
                @TempData["ErrorMessage"]
            </div>
        }

        <!-- Filter Panel -->
        <div class="filter-panel">
            <div class="filter-header">
                <div class="filter-title">
                    <svg class="filter-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.207A1 1 0 013 6.5V4z"></path>
                    </svg>
                    Filters & Search
                </div>
                <div style="display: flex; align-items: center; gap: 12px;">
                    <button id="applyFiltersBtn" class="k-button btn-primary">
                        <span class="bx bx-check"></span>
                        Apply
                    </button>
                    <button id="clearFiltersBtn" class="k-button btn-secondary" style="display: none;">
                        <span class="k-icon k-i-x"></span>
                        Clear All
                    </button>
                </div>
            </div>

            <!-- Filter Dropdowns -->
            <div class="filter-grid">
                <div class="filter-group">
                    <label class="filter-label">Jobsite</label>
                    <input id="jobsiteFilter" class="filter-dropdown" />
                </div>
                <div class="filter-group">
					<label for="yearFilter">Year</label>
                    <input id="yearFilter" class="filter-dropdown" />
				</div>
            </div>
        </div>

        <!-- Action Toolbar -->
        <div class="action-toolbar">
            <div class="action-buttons">
                <button id="pivotActualBtn" class="k-button btn-primary">
                    <span class="bx bx-pie-chart"></span>
                    Pivot Actual
                </button>
            </div>
        </div>

        <!-- Kendo Grid -->
        <div class="grid-container">
            <div id="productionActualGrid"></div>
        </div>
    </div>

    <script>
        $(document).ready(function () {
            let appliedFilters = {
                year: 'all',
                jobsite: 'all'
            };
            let pendingFilters = {
                year: 'all',
                jobsite: 'all'
            };

            // Initialize filter dropdowns
            $("#jobsiteFilter").kendoDropDownList({
                dataSource: {
                    data: [
                        { text: "All Jobsites", value: "all" },
                        { text: "ADMO", value: "ADMO" },
                        { text: "SERA", value: "SERA" },
                        { text: "MACO", value: "MACO" },
                        { text: "WARA", value: "WARA" },
                        { text: "SOUTH", value: "SOUTH" }
                    ]
                },
                dataTextField: "text",
                dataValueField: "value",
                value: "all",
                change: function () {
                    pendingFilters.jobsite = this.value();
                    updateFilterStatus();
                }
            });

            // Initialize Year Picker
			$("#yearFilter").kendoDatePicker({
				start: "decade",
				depth: "decade",
				format: "yyyy",
				footer: false,
				placeholder: "Select Year",
				change: function(e) {
					// Optionally auto-apply filters on change
				}
			});

            // Apply filters
            $("#applyFiltersBtn").click(function() {
                appliedFilters = { ...pendingFilters };
                refreshGrid();
            });

            // Clear filters
            $("#clearFiltersBtn").click(function() {
                $("#jobsiteFilter").data("kendoDropDownList").value("all");
                $("#yearFilter").data("kendoDropDownList").value("all");
                pendingFilters = {
                    year: 'all',
                    jobsite: 'all'
                };
                appliedFilters = {
                    year: 'all',
                    jobsite: 'all'
                };
                refreshGrid();
                updateFilterStatus();
            });

            // Initialize grid data
			//var gridData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
            var gridData = @Html.Raw(JsonConvert.SerializeObject(Model, jsonSettings));
            //console.log(gridData);
			// Initialize Kendo Grid
			$("#productionActualGrid").kendoGrid({
				dataSource: {
					data: gridData,
					pageSize: 10,
					schema: {
						model: {
							id: "Id",
							fields: {
								Id: { type: "string" },
								Jobsite: { type: "string" },
								Year: { type: "string" },
								VersionName: { type: "string" },
								Progress: { type: "object" }
							}
						}
					}
				},
				height: 600,
				sortable: true,
				pageable: {
					refresh: true,
					pageSizes: [10, 20, 50],
					buttonCount: 5
				},
				columns: [
					{
						field: "Jobsite",
						title: "Jobsite",
						width: "180px",
						template: "<div style='font-weight: 500;'>#= Jobsite #</div>"
					},
					{
						field: "Year",
						title: "Year",
						width: "100px",
						template: "<div style='text-align: center; font-weight: 500;'>#= Year #</div>"
					},
					{
						field: "VersionName",
						title: "Version Name",
						width: "160px",
						template: "<div style='font-family: monospace; font-size: 13px; padding: 4px 8px; border-radius: 4px;'>#= VersionName #</div>"
					},
					{
						field: "Progress",
						title: "Progress",
						width: "680px",
						sortable: false,
						template: function(dataItem) {
							return generateProgressTemplate(dataItem.Progress);
						}
					},
					{
						title: "Actions",
						width: "140px",
						sortable: false,
						template: function(dataItem) {
							return generateActionsTemplate(dataItem);
						}
					}
				]
			});

            // Helper functions
            function refreshGrid() {
                $("#productionActualGrid").data("kendoGrid").dataSource.read();
            }

            function updateFilterStatus() {
                var hasFilters = pendingFilters.year !== "all" ||
                               pendingFilters.jobsite !== "all";
                
                $("#clearFiltersBtn").toggle(hasFilters);
            }

            // Button event handlers
            $("#pivotActualBtn").click(function () {
                alert("Pivot template...");
            });

            function getStatusIcon(status) {
                switch ((status || '').toString().toLowerCase()) {
                    case 'completed': return '✓';
                    case 'running': return '⟳';
                    case 'error': return '✗';
                    case 'pending': return '○';
                    default: return '○';
                }
            }

            function generateProgressTemplate(progress) {
                // Normalisasi status dari backend: "Completed/Running/Error/Pending" -> lower-case class DPR
                function statusToClass(v) {
                    var s = (v || '').toString().toLowerCase();
                    if (s === 'completed') return 'completed';
                    if (s === 'running')   return 'running';
                    if (s === 'error')     return 'error';
                    return 'pending'; // default
                }
                // Tanda di dalam lingkaran sesuai DPR
                function statusMark(v, fallback) {
                    var s = (v || '').toString().toLowerCase();
                    if (s === 'completed') return '✓';
                    //if (s === 'running')   return '◐';
                    if (s === 'error')     return '✗';
                    return fallback || '•';
                }
                // Urutan step disesuaikan dengan DPR kamu, tetapi memakai key milik Production Actual
                var steps = [
                    { key: 'DailyFleet',    label: 'Daily Fleet',    fallback: 'DF' },
                    { key: 'MonthlyFleet',  label: 'Monthly Fleet',  fallback: 'MF' },
                    { key: 'DailyProcess',  label: 'Daily Process',  fallback: 'DP' },
                    { key: 'MonthlyProcess',label: 'Monthly Process',fallback: 'MP' },
                    { key: 'YearlyProcess', label: 'Yearly Process', fallback: 'YP' },
                    { key: 'YearlyFleet',   label: 'Yearly Fleet',   fallback: 'YF' },
                    { key: 'Success',       label: 'Success',        fallback: 'S'  }
                ];

                var html = '<div class="progress-indicator">';
                for (var i = 0; i < steps.length; i++) {
                    var st = steps[i];
                    var val = progress ? progress[st.key] : null;
                    var cls = statusToClass(val);
                    var mark = statusMark(val, st.fallback);

                    html += '<div class="progress-step">';
                    html += '  <div class="progress-circle ' + cls + '">' + mark + '</div>';
                    html += '  <div class="progress-label">' + st.label + '</div>';
                    html += '</div>';

                    if (i < steps.length - 1) {
                        html += '<div class="progress-arrow"></div>';
                    }
                }
                html += '</div>';
                return html;
            }

            // Actions template generator
            function generateActionsTemplate(dataItem) {
                var hasError = hasErrorStatus(dataItem.Progress);
                var isSuccess = isSuccessStatus(dataItem.Progress);
                
                var html = '<div style="display: flex; gap: 4px; justify-content: center;">';

                if (hasError) {
                    html += '<button class="action-btn btn-view" onclick="retryItem(\'' + dataItem.Id + '\')" title="Retry"><span class="mdi mdi-refresh"></span></button>';
                    html += '<button class="action-btn btn-view" onclick="downloadLog(\'' + dataItem.Id + '\')" title="Download error log"><span class="bx bx-download"></span></button>';
                }

                if (isSuccess) {
                    html += '<button class="action-btn btn-view" onclick="intervention(\'' + dataItem.Id + '\')" title="Intervention"><span class="mdi mdi-alert-box-outline"></span></button>';
                    html += '<button class="action-btn btn-view" onclick="deleteItem(\'' + dataItem.Id + '\')" title="Delete"><span class="bx bxs-trash"></span></button>';
                }

                html += '</div>';
                return html;
            }

            function hasErrorStatus(progress) {
                return progress.DailyFleet === 'error' ||
                    progress.MonthlyFleet === 'error' ||
                    progress.DailyProcess === 'error' ||
                    progress.MonthlyProcess === 'error' ||
                    progress.YearlyProcess === 'error' ||
                    progress.YearlyFleet === 'error';
            }

            function isSuccessStatus(progress) {
                return progress.Success === 'completed' && !hasErrorStatus(progress);
            }
        });
		
		// Global action functions
		function deleteItem(id) {
            alert("Delete Production Actual");
		}

		function retryItem(id) {
			alert("Retry generate data Actual");
		}

		function downloadLog(id) {
            alert("Download Log Error");
		}

		function intervention(id) {
            alert("Intervention Production Actual");
		}
    </script>
</body>
</html>