@model object
@{
    ViewData["Title"] = "Outlook";
    var filterOptions = ViewBag.FilterOptions;
    var emailSettings = ViewBag.EmailSettings;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link href="../../@Html.Raw(ViewBag.AppName)/css/neural-modules.css" rel="stylesheet" />
</head>
<body>
    <div class="main-container">
        <!-- Header -->
        <div class="header-card">
            <h1 class="header-title">Outlook</h1>
            <div class="status-overview">
                <div class="status-item">
                    <div class="status-dot draft"></div>
                    <span id="draftCount">0 Draft</span>
                </div>
                <div class="status-item">
                    <div class="status-dot review"></div>
                    <span id="reviewCount">0 In Review</span>
                </div>
                <div class="status-item">
                    <div class="status-dot approved"></div>
                    <span id="approvedCount">0 Approved</span>
                </div>
                <div class="status-item">
                    <span id="totalCount" style="font-weight: 500;">Total: 0</span>
                </div>
            </div>
        </div>

        <!-- Success/Error Messages -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success">
                <span>✓</span>
                @TempData["SuccessMessage"]
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-error">
                <span>⚠</span>
                @TempData["ErrorMessage"]
            </div>
        }

        <!-- Filter Panel -->
        <div class="filter-panel">
            <div class="filter-header">
                <div class="filter-title">
                    <svg class="filter-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.207A1 1 0 013 6.5V4z"></path>
                    </svg>
                    Filters & Search
                </div>
                <div style="display: flex; align-items: center; gap: 12px;">
                    <button id="applyFiltersBtn" class="k-button btn-primary">
                        <span class="bx bx-check"></span>
                        Apply
                    </button>
                    <button id="clearFiltersBtn" class="k-button btn-secondary" style="display: none;">
                        <span class="k-icon k-i-x"></span>
                        Clear All
                    </button>
                </div>
            </div>

            <!-- Filter Dropdowns -->
            <div class="filter-grid">
                <div class="filter-group">
                    <label class="filter-label">Prodsched Version</label>
                    <input id="prodschedVersionFilter" class="filter-dropdown" />
                </div>
                <div class="filter-group">
                    <label class="filter-label">Actual Version</label>
                    <input id="actualVersionFilter" class="filter-dropdown" />
                </div>
                <div class="filter-group">
                    <label class="filter-label">Jobsite</label>
                    <input id="jobsiteFilter" class="filter-dropdown" />
                </div>
            </div>
        </div>

        <!-- Action Toolbar -->
        <div class="action-toolbar">
            <div class="action-buttons">
                <button id="createNewBtn" class="k-button btn-primary">
                    <span class="bx bx-plus"></span>
                    Create Outlook
                </button>
            </div>
        </div>

        <!-- Kendo Grid -->
        <div class="grid-container">
            <div id="outlookGrid"></div>
        </div>
    </div>

    <script>
        $(document).ready(function () {
            let searchTerm = '';
            let appliedSearchTerm = '';
            let pendingFilters = {
                prodschedVersion: 'all',
                actualVersion: 'all',
                jobsite: 'all'
            };
            let appliedFilters = {
                prodschedVersion: 'all',
                actualVersion: 'all',
                jobsite: 'all'
            };

            // Initialize filter dropdowns
            $("#prodschedVersionFilter").kendoDropDownList({
                dataSource: {
                    data: [
                        { text: "All Versions", value: "all" },
        @foreach (var version in filterOptions.ProdschedVersions)
        {
            <text>{ text: "@version", value: "@version" },</text>
        }
                    ]
                },
                dataTextField: "text",
                dataValueField: "value",
                value: "all",
                change: function () {
                    pendingFilters.prodschedVersion = this.value();
                    updateFilterStatus();
                }
            });

            $("#actualVersionFilter").kendoDropDownList({
                dataSource: {
                    data: [
                        { text: "All Versions", value: "all" },
        @foreach (var version in filterOptions.ActualVersions)
        {
            <text>{ text: "@version", value: "@version" },</text>
        }
                    ]
                },
                dataTextField: "text",
                dataValueField: "value",
                value: "all",
                change: function () {
                    pendingFilters.actualVersion = this.value();
                    updateFilterStatus();
                }
            });

            $("#jobsiteFilter").kendoDropDownList({
                dataSource: {
                    data: [
                        { text: "All Jobsites", value: "all" },
        @foreach (var jobsite in filterOptions.Jobsites)
        {
            <text>{ text: "@jobsite", value: "@jobsite" },</text>
        }
                    ]
                },
                dataTextField: "text",
                dataValueField: "value",
                value: "all",
                change: function () {
                    pendingFilters.jobsite = this.value();
                    updateFilterStatus();
                }
            });

            // Search input
            $("#searchInput").on('input', function() {
                searchTerm = $(this).val();
                updateFilterStatus();
            });

            // Apply filters
            $("#applyFiltersBtn").click(function() {
                appliedFilters = { ...pendingFilters };
                appliedSearchTerm = searchTerm;
                refreshGrid();
            });

            // Clear filters
            $("#clearFiltersBtn").click(function() {
                $("#prodschedVersionFilter").data("kendoDropDownList").value("all");
                $("#actualVersionFilter").data("kendoDropDownList").value("all");
                $("#jobsiteFilter").data("kendoDropDownList").value("all");
                $("#searchInput").val('');
                searchTerm = '';
                pendingFilters = {
                    prodschedVersion: 'all',
                    actualVersion: 'all',
                    jobsite: 'all'
                };
                appliedFilters = {
                    prodschedVersion: 'all',
                    actualVersion: 'all',
                    jobsite: 'all'
                };
                appliedSearchTerm = '';
                refreshGrid();
                updateFilterStatus();
            });

            // Initialize Kendo Grid
            $("#outlookGrid").kendoGrid({
                dataSource: {
                    transport: {
                        read: {
                            url: "@Url.Action("GetOutlookData", "Outlook")",
                            type: "POST",
                            contentType: "application/json",
                            data: function () {
                                return JSON.stringify(getFilterData());
                            }
                        },
                        parameterMap: function (options, operation) {
                            if (operation === "read") {
                                return JSON.stringify({
                                    Take: options.take,
                                    Skip: options.skip,
                                    SortField: options.sort && options.sort[0] ? options.sort[0].field : null,
                                    SortDir: options.sort && options.sort[0] ? options.sort[0].dir : null,
                                    Filter: appliedFilters,
                                    SearchTerm: appliedSearchTerm
                                });
                            }
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        model: {
                            id: "Id"
                        }
                    },
                    pageSize: 10,
                    serverPaging: true,
                    serverSorting: true
                },
                height: 600,
                sortable: true,
                pageable: {
                    refresh: true,
                    pageSizes: [10, 20, 50],
                    buttonCount: 5
                },
                columns: [
                    {
                        field: "OutlookVersion",
                        title: "Outlook Version",
                        width: 300,
                        template: function (dataItem) {
                            return dataItem.OutlookVersion || "<span style='color: #94a3b8; font-style: italic;'>Not generated</span>";
                        }
                    },
                    {
                        field: "ProdschedVersion",
                        title: "Prodsched Version",
                        width: 200,
                        template: '<span style="font-family: monospace; font-size: 13px;">#= ProdschedVersion #</span>'
                    },
                    {
                        field: "ActualVersion",
                        title: "Actual Version",
                        width: 150,
                        template: '<span style="font-family: monospace; font-size: 13px;">#= ActualVersion #</span>'
                    },
                    {
                        field: "Status",
                        title: "Status",
                        width: 120,
                        template: function (dataItem) {
                            switch (dataItem.Status) {
                                case 1: // Draft
                                    return "<span class='status-badge status-draft'>Draft</span>";
                                case 2: // Review
                                    return "<span class='status-badge status-review'>Review</span>";
                                case 3: // Approved
                                    return "<span class='status-badge status-approved'>Approved</span>";
                                default:
                                    return "<span class='status-badge status-draft'>Unknown</span>";
                            }
                        }
                    },
                    {
                        field: "Author",
                        title: "Author",
                        width: 120,
                        template: '<span style="font-weight: 500;">#= Author #</span>'
                    },
                    {
                        field: "CreatedDate",
                        title: "Created Date",
                        width: 130,
                        template: "#= kendo.toString(kendo.parseDate(CreatedDate), 'MM/dd/yyyy') #"
                    },
                    {
                        field: "Reviewer",
                        title: "Reviewer",
                        width: 120,
                        template: function (dataItem) {
                            return dataItem.Reviewer || "<span style='color: #94a3b8;'>-</span>";
                        }
                    },
                    {
                        field: "ApprovalDueDate",
                        title: "Approval Due Date",
                        width: 140,
                        template: function (dataItem) {
                            return dataItem.ApprovalDueDate ?
                                kendo.toString(kendo.parseDate(dataItem.ApprovalDueDate), 'MM/dd/yyyy') :
                                "<span style='color: #94a3b8;'>-</span>";
                        }
                    },
                    {
                        field: "SentDate",
                        title: "Sent Date",
                        width: 120,
                        template: function (dataItem) {
                            return dataItem.SentDate ?
                                kendo.toString(kendo.parseDate(dataItem.SentDate), 'MM/dd/yyyy') :
                                "<span style='color: #94a3b8;'>-</span>";
                        }
                    },
                    {
                        field: "ApprovedDate",
                        title: "Approved Date",
                        width: 130,
                        template: function (dataItem) {
                            return dataItem.ApprovedDate ?
                                kendo.toString(kendo.parseDate(dataItem.ApprovedDate), 'MM/dd/yyyy') :
                                "<span style='color: #94a3b8;'>-</span>";
                        }
                    },
                    {
                        field: "Actions",
                        title: "Actions",
                        width: 150,
                        sortable: false,
                        template: function(dataItem) {
                            return '<div style="display: flex; gap: 4px; align-items: center;">' +
                                   '<button class="action-btn copy" onclick="viewDetail(' + dataItem.Id + ')" title="View Details">' +
                                   '<span class="bx bx-show"></span>' +
                                   '</button>' +

                                   '<button class="action-btn copy" onclick="copyFromExisting(' + dataItem.Id + ')" title="Copy from existing">' +
                                   '<span class="bx bx-copy"></span>' +
                                   '</button>' +

                                   '<button class="action-btn delete" onclick="deleteRow(' + dataItem.Id + ')" title="Delete">' +
                                   '<span class="bx bxs-trash"></span>' +
                                   '</button>' +
                                   '</div>';
                        }
                    }
                ],
                dataBound: function() {
                    updateStatusCounts();
                }
            });

            // Helper functions
            function getFilterData() {
                return {
                    Filter: appliedFilters
                };
            }

            function refreshGrid() {
                $("#outlookGrid").data("kendoGrid").dataSource.read();
            }

            function updateFilterStatus() {
                var hasFilters = pendingFilters.prodschedVersion !== "all" ||
                               pendingFilters.actualVersion !== "all" ||
                               pendingFilters.jobsite !== "all" ||
                               searchTerm.length > 0;

                $("#clearFiltersBtn").toggle(hasFilters);
            }

            function updateStatusCounts() {
                var grid = $("#outlookGrid").data("kendoGrid");
                var data = grid.dataSource.data();

                var draftCount = 0, reviewCount = 0, approvedCount = 0;

                for (var i = 0; i < data.length; i++) {
                    switch (data[i].Status) {
                        case 1: draftCount++; break;
                        case 2: reviewCount++; break;
                        case 3: approvedCount++; break;
                    }
                }

                $("#draftCount").text(draftCount + " Draft");
                $("#reviewCount").text(reviewCount + " In Review");
                $("#approvedCount").text(approvedCount + " Approved");
                $("#totalCount").text("Total: " + data.length);
            }

            // Button event handlers
            $("#createNewBtn").click(function () {
                alert("Create Outlook");
            });

            window.copyFromExisting = function(id) {
                alert("Copy From Existing Outlook id " + id);
            }

            window.viewDetail = function(id) {
                alert("View Detail Outlook Outlook id " + id);
            }

            window.deleteRow = function(id) {
                if (confirm("Are you sure you want to delete this Outlook?")) {
                    $.ajax({
                        url: "@Url.Action("Delete", "Outlook")",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify([id]),
                        success: function (result) {
                            if (result.success) {
                                alert(result.message);
                                refreshGrid();
                            } else {
                                alert("Error: " + result.message);
                            }
                        },
                        error: function () {
                            alert("Error occurred while deleting outlook.");
                        }
                    });
                }
            };
        });
    </script>
</body>
</html>